[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "linkedin-feed-capture"
version = "0.1.0"
description = "Production-ready LinkedIn feed scraper for RAG applications"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "LinkedIn Feed Capture Team", email = "contact@example.com"},
]
keywords = ["linkedin", "scraping", "selenium", "rag", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "selenium>=4.15.0",
    "selenium-stealth>=1.0.6",
    "beautifulsoup4>=4.12.0",
    "pydantic>=2.5.0",
    "typer[all]>=0.9.0",
    "rich>=13.7.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "lxml>=4.9.0",
    "tenacity>=8.2.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.5.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "types-requests>=2.31.0",
    "types-beautifulsoup4>=4.12.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=0.21.0",
    "coverage[toml]>=7.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
linkedin-capture = "linkedin_feed_capture.cli.main:app"

[project.urls]
Homepage = "https://github.com/your-org/linkedin-feed-capture"
Documentation = "https://linkedin-feed-capture.readthedocs.io"
Repository = "https://github.com/your-org/linkedin-feed-capture"
"Bug Tracker" = "https://github.com/your-org/linkedin-feed-capture/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/linkedin_feed_capture"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "A",   # flake8-builtins
    "PL",  # pylint
    "TRY", # tryceratops
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["linkedin_feed_capture"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium_stealth.*",
    "bs4.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/linkedin_feed_capture",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 